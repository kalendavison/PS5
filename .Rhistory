height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, Trapezoid)
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
setGeneric(name="integrateIt",
def=function(xvalues, yvalues, start, end, rule)
{standardGeneric("integrateIt")}
k
setGeneric(name="integrateIt",
def=function(xvalues, yvalues, start, end, rule)
{standardGeneric("integrateIt")}
)
setClass(Class = "Trapezoid",
representation = representation(
xvalues = "numeric",
yvalues = "numeric",
area = "numeric"
),
prototype = prototype(
xvalues = c(),
yvalues = c(),
area = c()
)
)
setValidity("Trapezoid", function(object){
areaLength = (length(object@area == 1))
valuesLength = (length(object@xvalues) == length(object@yvalues))
if(!areaLength){
return("Trapezoid not valid! Area must be of length 1.")
}
if(!valuesLength){
return("Trapezoid is not valid! xvalues and yvalues must be of the same length.")
}
})
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
setMethod("initialize", "Trapezoid", function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
})
setMethod("initialize", "Simpson", function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
-
=
setMethod("initialize", "Simpson", function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
})
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt <- function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (c(Trap, xvalues, yvalues, rule)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (c(Simp, xvalues, yvalues, rule)) }
}
integrateIt(1:10, 11:20, 1, 20, "Simpson")
integrateIt(1:10, 11:20, 1, 20, "Trapezoid") #formatting is good on tests but results are not the same suggesting inaccuracy
current.code <- as.package("integrateIt")
load_all(current.code)
current.code <- as.package("PS5")
getwd()
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/PS5")
current.code <- as.package("PS5")
current.code <- as.package("integrateIt")
integrateIt(dx, dy, , , "Trapezoid")
dx <- 1:10
dy <- 11:20
integrateIt(dx, dy, , , "Trapezoid")
integrateIt(xvalues = dx, yvalues = dy, start = dx[1], end = dy[10] , "Trapezoid")
integrateIt(xvalues = dx, yvalues = dy, start = dx[1], end = dy[10] , "Simpson")
as.package("integrateIt")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first+odd_middle+even_middle+second_last+last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
as.package(current.code)
getwd()
getwd()
library(devtools)
library(roxygen2)
getwd()
current.code <- as.package("integrateIt")
getwd()
current.code <- as.package("integrateIt.R")
current.code <- as.package("integrateIt")
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/PS5")
current.code <- as.package("integrateIt")
current.code <- as.package("integrateIt")
read.dcf(path_desc)
read.dcf(path_desc)[1, ]
library(devtools)
library(roxygen2)
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/PS5") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
integrateIt
getMethod(integrateIt, "Trapezoid")
getMethod(integrateIt)
x<-c(1,10)
y<-c(11,20)
integrateIt(x, y, NA, NA, "Trapezoid")
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, NA, NA, "Trapezoid")
integrateIt(x, y, min(x), max(x), "Trapezoid")
integrateIt(x, y, min(x), max(x), "Simpson")
integrateIt
getMethod(integrateIt)
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, min(x), max(x), "Trapezoid")
integrateIt(x, y, min(x), max(x), "Simpson")
test = integrateIt(x, y, min(x), max(x), "Simpson")
class(test)
print(test)
print(x)
library(integrateIt)
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, min(x), max(x), "Trapezoid")
test = integrateIt(x, y, min(x), max(x), "Simpson")
print()
print(test)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
setMethod("print", "Trapezoid",
function(x){
print(x@area)})
print(test)
print(test)
print(test)
integrateIt(x, y, min(x), max(x), "Trapezoid")
test = integrateIt(x, y, min(x), max(x), "Simpson")
library(integrateIt)
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, min(x), max(x), "Trapezoid")
test = integrateIt(x, y, min(x), max(x), "Simpson")
print(test)
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Simpson")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
start = min(xvalues)
end = max(xvalues)
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*sum(yvalues))-yvalues[1]-yvalues[length(yvalues)])
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(0,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 5, "Simpson")
integrateIt(1:10, 11:20, 1, 5, "Trapezoid")
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
thing=5
check=1:10
newthing=check>thing
newthing
thing=1:10
thingy=11:20
cat(thing, thingy)
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:xvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(x)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(0,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Simpson")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:yvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(x)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(0,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:yvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(x)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(0,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
integrateIt(1:10, 11:20, 1, 7, "Simpson")
integrateIt(1:10, 11:20, 2, 10, "Trapezoid")
integrateIt(1:10, 11:20, 4, 10, "Trapezoid")
integrateIt(1:10, 11:20, 4, 8, "Trapezoid")
integrateIt(1:10, 11:20, 4, 8, "Simpson")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:yvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(0,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, second_last, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 4, 8, "Simpson")
integrateIt(1:10, 11:20, 4, 8, "Trapezoid")
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:yvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
second_last = 4*(yvalues[length(yvalues)-1])
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first, odd_middle, even_middle, last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 4, 8, "Trapezoid")
integrateIt(1:10, 11:20, 4, 8, "Simpson")
integrateIt(1:10, 11:20, 1, 8, "Trapezoid")
integrateIt(1:10, 11:20, 1, 8, "Simpson")
integrateIt(1:10, 11:20, 1, 9, "Trapezoid")
integrateIt(1:10, 11:20, 1, 8, "Simpson")
integrateIt(1:10, 11:20, 1, 9, "Simpson")
integrateIt(1:20, 21:40, 1, 18, "Simpson")
integrateIt(1:20, 21:40, 1, 18, "Trapezoid")
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
integrateIt
getMethod(integrateIt)
library(integrateIt)
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, 2, 8, "Trapezoid")
integrateIt(x, y, 2, 8, "Simpson")
x<-c(1:10)
y<-c(11:20)
integrateIt(x, y, 2, 8, "Trapezoid")
integrateIt(x, y, 2, 8, "Simpson")
test = integrateIt(x, y, 1, 10, "Simpson")
print(test)
setMethod("print", "Trapezoid",
function(x){
print(x@area)})
test = integrateIt(x, y, 1, 10, "Trapezoid")
print(test)
print()
test = integrateIt(x, y, 1, 10, "Trapezoid")
class(test)
print(test)
test = integrateIt(x, y, 1, 10, "Trapezoid")
class(test)
print(test)
setMethod("print", "Trapezoid",
function(x){
print(x@area)})
print(test)
setMethod("integrateIt",
definition=function(xvalues, yvalues, start, end, rule){
xvalues = xvalues[start]:xvalues[end]
yvalues = yvalues[start]:yvalues[end]
height = (end - start) / (length(xvalues) - 1)
h = height
if (rule == "Trapezoid"){
Trap_area = (h/2)*((2*(sum(yvalues))-yvalues[1]-yvalues[length(yvalues)]))
return (new("Trapezoid", xvalues = xvalues, yvalues = yvalues, area = Trap_area)) }
if (rule == "Simpson"){
first = yvalues[1]
last = yvalues[length(yvalues)]
middle = yvalues[2:(length(xvalues)-1)]
odd_middle = 4*(middle[seq(1,length(middle),2)])
even_middle = 2*(middle[seq(2,length(middle),2)])
Simp_area = (h/3) * (sum(first, sum(odd_middle), sum(even_middle), last))
return (new("Simpson", xvalues = xvalues, yvalues = yvalues, area = Simp_area)) }
})
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
integrateIt(x, y, 2, 8, "Trapezoid")
integrateIt(x, y, 2, 8, "Simpson") #return same or similar answers
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
even_middle = 2*(middle[seq(2,length(middle),2)])
class(test)
print(test)
